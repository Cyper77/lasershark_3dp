/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _TWOSTEPJSONCLIENT_H_
#define _TWOSTEPJSONCLIENT_H_

#include <jsonrpc/rpc.h>

class TwoStepJSONClient
{
    public:
        TwoStepJSONClient(jsonrpc::AbstractClientConnector* conn)
        {
            this->client = new jsonrpc::Client(conn);
        }
        ~TwoStepJSONClient()
        {
            delete this->client;
        }

        Json::Value get100uSDelay(const int& stepperNum) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("get100uSDelay",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getCurrent(const int& stepperNum) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("getCurrent",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getDir(const int& stepperNum) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("getDir",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getEnable(const int& stepperNum) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("getEnable",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getIsMoving(const int& stepperNum) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("getIsMoving",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getMicrosteps(const int& stepperNum) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("getMicrosteps",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getSwitchStatus() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getSwitchStatus",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        std::string getTwoStepJSONVersion() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getTwoStepJSONVersion",p);
    if (result.isString())
        return result.asString();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getVersion() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getVersion",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        void printText(const std::string& text) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["text"] = text; 

            this->client->CallNotification("printText",p);
        }

        Json::Value set100uSDelay(const int& stepperNum, const int& value) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 
p["value"] = value; 

            Json::Value result = this->client->CallMethod("set100uSDelay",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value setCurrent(const int& stepperNum, const int& value) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 
p["value"] = value; 

            Json::Value result = this->client->CallMethod("setCurrent",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value setDir(const int& stepperNum, const bool& high) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["high"] = high; 
p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("setDir",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value setEnable(const int& stepperNum, const bool& enable) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["enable"] = enable; 
p["stepperNum"] = stepperNum; 

            Json::Value result = this->client->CallMethod("setEnable",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value setMicrosteps(const int& stepperNum, const int& value) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 
p["value"] = value; 

            Json::Value result = this->client->CallMethod("setMicrosteps",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value setSafeSteps(const int& stepperNum, const int& steps) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 
p["steps"] = steps; 

            Json::Value result = this->client->CallMethod("setSafeSteps",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value setSteps(const int& stepperNum, const int& steps) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperNum"] = stepperNum; 
p["steps"] = steps; 

            Json::Value result = this->client->CallMethod("setSteps",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value start(const bool& stepperOne, const bool& stepperTwo) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperOne"] = stepperOne; 
p["stepperTwo"] = stepperTwo; 

            Json::Value result = this->client->CallMethod("start",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value stop(const bool& stepperOne, const bool& stepperTwo) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["stepperOne"] = stepperOne; 
p["stepperTwo"] = stepperTwo; 

            Json::Value result = this->client->CallMethod("stop",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

    private:
        jsonrpc::Client* client;
};
#endif //_TWOSTEPJSONCLIENT_H_
