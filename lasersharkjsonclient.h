/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _LASERSHARKJSONCLIENT_H_
#define _LASERSHARKJSONCLIENT_H_

#include <jsonrpc/rpc.h>

class LaserSharkJSONClient
{
    public:
        LaserSharkJSONClient(jsonrpc::AbstractClientConnector* conn)
        {
            this->client = new jsonrpc::Client(conn);
        }
        ~LaserSharkJSONClient()
        {
            delete this->client;
        }

        std::string getLaserSharkJSONVersion() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getLaserSharkJSONVersion",p);
    if (result.isString())
        return result.asString();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getLayerDone() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getLayerDone",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getLayerErrorMessage() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getLayerErrorMessage",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getLayerRunning() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getLayerRunning",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getLayerSamplesLeft() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getLayerSamplesLeft",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getLayerTotalSamples() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getLayerTotalSamples",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getMaxSampleRate() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getMaxSampleRate",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value getResolution() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("getResolution",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        void printText(const std::string& text) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["text"] = text; 

            this->client->CallNotification("printText",p);
        }

        Json::Value sendLayer(const std::string& base64PNGData, const int& xUpperLeftPos, const int& yUpperLeftPos) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["base64PNGData"] = base64PNGData; 
p["xUpperLeftPos"] = xUpperLeftPos; 
p["yUpperLeftPos"] = yUpperLeftPos; 

            Json::Value result = this->client->CallMethod("sendLayer",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value setSampleRate(const int& rate) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["rate"] = rate; 

            Json::Value result = this->client->CallMethod("setSampleRate",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value startLayer() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("startLayer",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value stopAndClearLayer() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("stopAndClearLayer",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

    private:
        jsonrpc::Client* client;
};
#endif //_LASERSHARKJSONCLIENT_H_
